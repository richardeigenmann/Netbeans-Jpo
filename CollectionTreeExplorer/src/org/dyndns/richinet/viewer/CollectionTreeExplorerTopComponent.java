/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.dyndns.richinet.viewer;

import java.awt.BorderLayout;
import jpo.dataModel.Settings;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
         dtd = "-//org.dyndns.richinet.viewer//CollectionTreeExplorerTopComponent//EN",
        autostore = false
)
@TopComponent.Description(
         preferredID = "CollectionTreeExplorerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration( mode = "explorer", openAtStartup = false )
@ActionID( category = "Window", id = "org.dyndns.richinet.viewer.CollectionTreeExplorerTopComponent" )
@ActionReference( path = "Menu/Window" /*, position = 333 */ )
@TopComponent.OpenActionRegistration(
         displayName = "#CTL_CollectionTreeExplorerTopComponentAction",
        preferredID = "CollectionTreeExplorerTopComponent"
)
@Messages( {
    "CTL_CollectionTreeExplorerTopComponentAction=Collection Explorer Window",
    "CTL_CollectionTreeExplorerTopComponent=Collection Explorer Window",
    "HINT_CollectionTreeExplorerTopComponent=This is a Collection Explorer window"
} )
public final class CollectionTreeExplorerTopComponent extends TopComponent implements ExplorerManager.Provider {

    public CollectionTreeExplorerTopComponent() {
        initComponents();
        setName( Bundle.CTL_CollectionTreeExplorerTopComponent() );
        setToolTipText( Bundle.HINT_CollectionTreeExplorerTopComponent() );

        setLayout( new BorderLayout() );
//1. Add an explorer view, in this case BeanTreeView:
        add( new BeanTreeView(), BorderLayout.CENTER );
//2. Create a node hierarchy:
        Children carChildren = Children.create( new SortableDefaultMutableTreeNodeChildFactory(), true );
        Node rootNode = new AbstractNode( carChildren );
        rootNode.setDisplayName( Settings.pictureCollection.getRootNode().getUserObject().toString() );
//3. Set the root of the node hierarchy on the ExplorerManager:
        em.setRootContext( rootNode );

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties( java.util.Properties p ) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty( "version", "1.0" );
        // TODO store your settings
    }

    void readProperties( java.util.Properties p ) {
        String version = p.getProperty( "version" );
        // TODO read your settings according to their version
    }

    private final ExplorerManager em = new ExplorerManager();

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }
}
